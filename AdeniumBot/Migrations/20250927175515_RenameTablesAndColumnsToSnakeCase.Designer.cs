// <auto-generated />
using System;
using AdeniumBot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdeniumBot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250927175515_RenameTablesAndColumnsToSnakeCase")]
    partial class RenameTablesAndColumnsToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdeniumBot.Models.BlacklistLink", b =>
                {
                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.HasKey("OwnerId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("blacklist_links", (string)null);
                });

            modelBuilder.Entity("AdeniumBot.Models.FavoriteLink", b =>
                {
                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.HasKey("OwnerId", "TargetId");

                    b.HasIndex("TargetId");

                    b.ToTable("favorite_links", (string)null);
                });

            modelBuilder.Entity("AdeniumBot.Models.PlayerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DiscordUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("discord_user_id");

                    b.Property<int>("Exp")
                        .HasColumnType("integer")
                        .HasColumnName("exp");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId")
                        .IsUnique();

                    b.ToTable("player_profiles", null, t =>
                        {
                            t.HasCheckConstraint("ck_player_profiles_exp_nonneg", "exp >= 0");
                        });
                });

            modelBuilder.Entity("AdeniumBot.Models.PlayerQuest", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasColumnName("player_id");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer")
                        .HasColumnName("quest_id");

                    b.Property<int>("CompletedCount")
                        .HasColumnType("integer")
                        .HasColumnName("completed_count");

                    b.Property<DateTime?>("LastCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_completed_at");

                    b.HasKey("PlayerId", "QuestId");

                    b.HasIndex("QuestId");

                    b.ToTable("player_quests", null, t =>
                        {
                            t.HasCheckConstraint("ck_player_quests_completed_nonneg", "completed_count >= 0");
                        });
                });

            modelBuilder.Entity("AdeniumBot.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ExpReward")
                        .HasColumnType("integer")
                        .HasColumnName("exp_reward");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxCompletionsPerPlayer")
                        .HasColumnType("integer")
                        .HasColumnName("max_completions_per_player");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("quests", null, t =>
                        {
                            t.HasCheckConstraint("ck_quests_exp_reward_nonneg", "exp_reward >= 0");

                            t.HasCheckConstraint("ck_quests_max_comp_valid", "max_completions_per_player IS NULL OR max_completions_per_player > 0");
                        });
                });

            modelBuilder.Entity("AdeniumBot.Models.RoleExpRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpAmount")
                        .HasColumnType("integer")
                        .HasColumnName("exp_amount");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.HasIndex("GuildId", "RoleId")
                        .IsUnique();

                    b.ToTable("role_exp_rules", null, t =>
                        {
                            t.HasCheckConstraint("ck_role_exp_rules_amount_nonneg", "exp_amount >= 0");
                        });
                });

            modelBuilder.Entity("AdeniumBot.Models.BlacklistLink", b =>
                {
                    b.HasOne("AdeniumBot.Models.PlayerProfile", "Owner")
                        .WithMany("Blacklist")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdeniumBot.Models.PlayerProfile", "Target")
                        .WithMany("BlacklistedBy")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("AdeniumBot.Models.FavoriteLink", b =>
                {
                    b.HasOne("AdeniumBot.Models.PlayerProfile", "Owner")
                        .WithMany("Favorites")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdeniumBot.Models.PlayerProfile", "Target")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("AdeniumBot.Models.PlayerQuest", b =>
                {
                    b.HasOne("AdeniumBot.Models.PlayerProfile", "Player")
                        .WithMany("Quests")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdeniumBot.Models.Quest", "Quest")
                        .WithMany("PlayerQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("AdeniumBot.Models.PlayerProfile", b =>
                {
                    b.Navigation("Blacklist");

                    b.Navigation("BlacklistedBy");

                    b.Navigation("FavoritedBy");

                    b.Navigation("Favorites");

                    b.Navigation("Quests");
                });

            modelBuilder.Entity("AdeniumBot.Models.Quest", b =>
                {
                    b.Navigation("PlayerQuests");
                });
#pragma warning restore 612, 618
        }
    }
}
