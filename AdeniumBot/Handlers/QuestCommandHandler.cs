using Discord;
using Discord.WebSocket;
using AdeniumBot.Data;
using AdeniumBot.Models;
using Microsoft.EntityFrameworkCore;
using AdeniumBot.Services; 

namespace AdeniumBot.Handlers
{
    public class QuestCommandHandler
    {
        private readonly BotDbContextFactory _dbFactory = new();
        private readonly DiscordSocketClient _client;

        // ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        private const ulong NotifyChannelId = 1419672109575311441;

        public QuestCommandHandler(DiscordSocketClient client)
        {
            _client = client ?? throw new ArgumentNullException(nameof(client));
        }

        public async Task OnSlashCommandAsync(SocketSlashCommand command)
        {
            if (command.CommandName != "quest") return;

            try
            {
                if (command.GuildId is null || command.User is not SocketGuildUser guildUser)
                {
                    await command.RespondAsync("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral: true);
                    return;
                }

                var guild = (command.Channel as SocketGuildChannel)?.Guild;
                if (guild == null)
                {
                    await command.RespondAsync("–ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral: true);
                    return;
                }

                await command.DeferAsync(ephemeral: true);

                // –†–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è —Ä–æ–ª—å
                var roleIdStr = Environment.GetEnvironmentVariable("QUEST_MARKER_ROLE_ID");
                if (!ulong.TryParse(roleIdStr, out var requiredRoleId))
                {
                    await command.FollowupAsync("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è **QUEST_MARKER_ROLE_ID**.", ephemeral: true);
                    return;
                }

                var hasRole = guildUser.Roles.Any(r => r.Id == requiredRoleId);
                if (!hasRole)
                {
                    await command.FollowupAsync("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral: true);
                    return;
                }

                var sub = command.Data.Options.FirstOrDefault();
                if (sub is null || sub.Name != "done")
                {
                    await command.FollowupAsync("–ò—Å–ø–æ–ª—å–∑—É–π: `/quest done number:<—á–∏—Å–ª–æ> user:<–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>`.", ephemeral: true);
                    return;
                }

                int? number = null;
                IUser? targetUser = null;

                foreach (var opt in sub.Options)
                {
                    if (opt.Name == "number" && opt.Value is long n) number = (int)n;
                    if (opt.Name == "user" && opt.Value is IUser u) targetUser = u;
                }

                if (number is null || targetUser is null)
                {
                    await command.FollowupAsync("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ `number`, –∏ `user`.", ephemeral: true);
                    return;
                }

                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(20));
                var ct = cts.Token;

                await using var db = _dbFactory.CreateDbContext(Array.Empty<string>());
                
                var helper = new HelperService(_client, db);
                var profiles = await helper.GetOrCreateProfilesAsync(guild, ct);

                var targetIdLong = unchecked((long)targetUser.Id);
                var player = profiles.FirstOrDefault(p => p.DiscordUserId == targetIdLong);
                if (player == null)
                {
                    await command.FollowupAsync("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞.", ephemeral: true);
                    return;
                }
                
                var (ok, msg, expReward) = await MarkQuestDoneAsync(db, player, targetUser, number.Value, ct);

                // –ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
                await command.FollowupAsync(msg, ephemeral: true);

                // –ø—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (ok && expReward > 0)
                {
                    var ch = guild.GetTextChannel(NotifyChannelId);
                    if (ch != null)
                    {
                        await ch.SendMessageAsync(
                            $"üéØ {targetUser.Mention} –≤—ã–ø–æ–ª–Ω–∏–ª –∫–≤–µ—Å—Ç **#{number.Value}**. " +
                            $"–ù–∞—á–∏—Å–ª–µ–Ω–æ **{expReward} EXP**. (–æ—Ç–º–µ—Ç–∏–ª {guildUser.Mention})");
                    }
                }
            }
            catch (OperationCanceledException)
            {
                try { await command.FollowupAsync("‚è±Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.", ephemeral: true); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Quest command error: " + ex);
                try
                {
                    await command.FollowupAsync("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.", ephemeral: true);
                }
                catch { }
            }
        }

        /// <summary>
        /// –û—Ç–º–µ—á–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞.
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
        /// </summary>
        private static async Task<(bool ok, string message, int expReward)> MarkQuestDoneAsync(
            BotDbContext db,
            PlayerProfile player,
            IUser targetUser,
            int questNumber,
            CancellationToken ct = default)
        {
            var quest = await db.Quests
                .FirstOrDefaultAsync(q => q.Number == questNumber && q.IsActive, ct);

            if (quest == null)
                return (false, $"–ö–≤–µ—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º **{questNumber}** –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω.", 0);

            var pq = await db.PlayerQuests
                .FirstOrDefaultAsync(x => x.PlayerId == player.Id && x.QuestId == quest.Id, ct);

            if (pq == null)
            {
                pq = new PlayerQuest
                {
                    PlayerId = player.Id,
                    QuestId = quest.Id,
                    CompletedCount = 0
                };
                db.PlayerQuests.Add(pq);
            }

            if (quest.MaxCompletionsPerPlayer.HasValue && pq.CompletedCount >= quest.MaxCompletionsPerPlayer.Value)
            {
                return (false,
                    $"–õ–∏–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –∫–≤–µ—Å—Ç–∞ **{quest.Number}** —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç " +
                    $"({pq.CompletedCount}/{quest.MaxCompletionsPerPlayer}).", 0);
            }

            pq.CompletedCount += 1;
            pq.LastCompletedAt = DateTime.UtcNow;

            player.Exp += quest.ExpReward;

            await db.SaveChangesAsync(ct);

            var limitText = quest.MaxCompletionsPerPlayer.HasValue
                ? $"{pq.CompletedCount}/{quest.MaxCompletionsPerPlayer}"
                : $"{pq.CompletedCount}";

            var message =
                $"–û—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ **{quest.Number}** —É {targetUser.Mention}. " +
                $"–ü—Ä–æ–≥—Ä–µ—Å—Å: **{limitText}**. –ù–∞—á–∏—Å–ª–µ–Ω–æ **{quest.ExpReward} EXP**.";

            return (true, message, quest.ExpReward);
        }
    }
}
